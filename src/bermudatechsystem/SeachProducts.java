    /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bermudatechsystem;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nathan Cabral
 */
public class SeachProducts extends javax.swing.JFrame {

    /**
     * Creates new form SeachProducts
     */
    public SeachProducts() {
        initComponents();
        this.setTitle("Search Products");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        lblSearchedProduct = new javax.swing.JLabel();
        searchedProductName = new javax.swing.JTextField();
        btnFindProductsByName = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchResults = new javax.swing.JTable();
        btnClearSearch = new javax.swing.JButton();
        lblSearchedProductID = new javax.swing.JLabel();
        searchedProductID = new javax.swing.JTextField();
        btnSearchByProductID = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        searchedHardwareType = new javax.swing.JTextField();
        btnSearchByHardwareType = new javax.swing.JButton();
        btnPrintReport = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuBarFile = new javax.swing.JMenu();
        jmnuLogOut = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        menuBarView = new javax.swing.JMenu();
        checkoutInterface = new javax.swing.JMenuItem();
        menuBarAdminInterface = new javax.swing.JMenuItem();
        jmEdit = new javax.swing.JMenu();
        menuBarAddNewCustomer = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblSearchedProduct.setText("Product Name to be Searched for:");

        searchedProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchedProductNameActionPerformed(evt);
            }
        });

        btnFindProductsByName.setText("Search By Product Name");
        btnFindProductsByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindProductsByNameActionPerformed(evt);
            }
        });

        searchResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Hardware Type", "Product Name", "Product Price", "Product Quantity", "Supplier ID"
            }
        ));
        jScrollPane1.setViewportView(searchResults);

        btnClearSearch.setText("Clear Search");
        btnClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSearchActionPerformed(evt);
            }
        });

        lblSearchedProductID.setText("Product ID to be Searched for:");

        searchedProductID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchedProductIDActionPerformed(evt);
            }
        });

        btnSearchByProductID.setText("Search By Product ID");
        btnSearchByProductID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByProductIDActionPerformed(evt);
            }
        });

        jLabel1.setText("Hardware Type to be Searched for:");

        searchedHardwareType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchedHardwareTypeActionPerformed(evt);
            }
        });

        btnSearchByHardwareType.setText("Search By Hardware Type");
        btnSearchByHardwareType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByHardwareTypeActionPerformed(evt);
            }
        });

        btnPrintReport.setText("Print Report ");

        menuBarFile.setText("File");

        jmnuLogOut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmnuLogOut.setText("Log Out");
        jmnuLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuLogOutActionPerformed(evt);
            }
        });
        menuBarFile.add(jmnuLogOut);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Exit System");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        menuBarFile.add(jMenuItem3);

        jMenuBar1.add(menuBarFile);

        menuBarView.setText("View");
        menuBarView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarViewActionPerformed(evt);
            }
        });

        checkoutInterface.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        checkoutInterface.setText("Checkout Interface");
        checkoutInterface.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutInterfaceActionPerformed(evt);
            }
        });
        menuBarView.add(checkoutInterface);

        menuBarAdminInterface.setText("Admin Interface");
        menuBarAdminInterface.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarAdminInterfaceActionPerformed(evt);
            }
        });
        menuBarView.add(menuBarAdminInterface);

        jMenuBar1.add(menuBarView);

        jmEdit.setText("Edit");

        menuBarAddNewCustomer.setText("Add New Customer");
        menuBarAddNewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarAddNewCustomerActionPerformed(evt);
            }
        });
        jmEdit.add(menuBarAddNewCustomer);

        jMenuBar1.add(jmEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSearchedProductID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSearchedProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchedProductName)
                    .addComponent(searchedProductID)
                    .addComponent(searchedHardwareType, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnFindProductsByName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSearchByProductID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSearchByHardwareType, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(423, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnClearSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(btnPrintReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(417, 417, 417))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchedProduct)
                    .addComponent(searchedProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindProductsByName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchedProductID)
                    .addComponent(searchedProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByProductID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(searchedHardwareType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByHardwareType))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClearSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPrintReport)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindProductsByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindProductsByNameActionPerformed
        findProductsByName();
    }//GEN-LAST:event_btnFindProductsByNameActionPerformed

    private void btnClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSearchActionPerformed
        searchedProductName.setText("");
        searchedProductID.setText("");
        searchedHardwareType.setText("");
        searchModel.setRowCount(0);
    }//GEN-LAST:event_btnClearSearchActionPerformed

    private void searchedProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchedProductNameActionPerformed
        findProductsByName();
    }//GEN-LAST:event_searchedProductNameActionPerformed

    private void searchedProductIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchedProductIDActionPerformed
        findProductsByID();
    }//GEN-LAST:event_searchedProductIDActionPerformed

    private void btnSearchByProductIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByProductIDActionPerformed
        findProductsByID();
    }//GEN-LAST:event_btnSearchByProductIDActionPerformed

    private void searchedHardwareTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchedHardwareTypeActionPerformed
        findProductsByHardwareType();
    }//GEN-LAST:event_searchedHardwareTypeActionPerformed

    private void btnSearchByHardwareTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByHardwareTypeActionPerformed
        findProductsByHardwareType();
    }//GEN-LAST:event_btnSearchByHardwareTypeActionPerformed

    private void menuBarViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarViewActionPerformed
        this.setVisible(false);
        new CheckOutInterface().setVisible(true);
    }//GEN-LAST:event_menuBarViewActionPerformed

    private void menuBarAddNewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarAddNewCustomerActionPerformed
        this.setVisible(false);
        new AddCustomer().setVisible(true);
    }//GEN-LAST:event_menuBarAddNewCustomerActionPerformed

    private void menuBarAdminInterfaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarAdminInterfaceActionPerformed
       int userRights = Database.companyDatabase.getCurrentUserRights();
       if(userRights == 2)
       {
           this.setVisible(false);
           new AdminInterface().setVisible(true);
       }
       else
       {
           errorMessage = "You do not have access to this interface.";
           new ErrorMessage(errorMessage).setVisible(true);
       }
    }//GEN-LAST:event_menuBarAdminInterfaceActionPerformed

    private void jmnuLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuLogOutActionPerformed
        this.setVisible(false);
        new LoginInterface().setVisible(true);
    }//GEN-LAST:event_jmnuLogOutActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        Database.companyDatabase.saveSystem();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void checkoutInterfaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutInterfaceActionPerformed
        this.setVisible(false);
        new CheckOutInterface().setVisible(true);
    }//GEN-LAST:event_checkoutInterfaceActionPerformed
    public void findProductsByName()
    {
        String searchParameters = searchedProductName.getText();
        for(int i=0; i<Database.companyDatabase.products.size();i++)
        {
            searchProductName = Database.companyDatabase.products.get(i).getProductName();
            
            if(searchProductName.contains(searchParameters))
            {
                searchProductID = Database.companyDatabase.products.get(i).getProductID();
                searchHardwareType = Database.companyDatabase.products.get(i).getHardwareType();
                searchPrice = Database.companyDatabase.products.get(i).getPrice();
                searchQuantity = Database.companyDatabase.products.get(i).getQuantity();
                searchSupplier = Database.companyDatabase.products.get(i).getSupplier();
                
                int totalSize = Database.companyDatabase.products.size();
                
                String[] inputData = new String[totalSize];
                inputData[0] = searchProductID;
                inputData[1] = searchHardwareType;
                inputData[2] = searchProductName;
                inputData[3] = Integer.toString(searchPrice);
                inputData[4] = Integer.toString(searchQuantity);
                inputData[5] = searchSupplier;
                
                searchModel = (DefaultTableModel) searchResults.getModel();
                
                searchModel.addRow(inputData);
                               
            }
             
        }
        this.setVisible(false);
        this.setVisible(true);   
    }
    
    public void findProductsByID()
    {
        String searchParameters = searchedProductID.getText();
        for(int i=0; i<Database.companyDatabase.products.size();i++)
        {
            searchProductID = Database.companyDatabase.products.get(i).getProductID();
            
            if(searchProductID.equalsIgnoreCase(searchParameters))
            {
                searchProductName = Database.companyDatabase.products.get(i).getProductName();
                searchHardwareType = Database.companyDatabase.products.get(i).getHardwareType();
                searchPrice = Database.companyDatabase.products.get(i).getPrice();
                searchQuantity = Database.companyDatabase.products.get(i).getQuantity();
                searchSupplier = Database.companyDatabase.products.get(i).getSupplier();
                
                int totalSize = Database.companyDatabase.products.size();
                
                String[] inputData = new String[totalSize];
                inputData[0] = searchProductID;
                inputData[1] = searchHardwareType;
                inputData[2] = searchProductName;
                inputData[3] = Integer.toString(searchPrice);
                inputData[4] = Integer.toString(searchQuantity);
                inputData[5] = searchSupplier;
                
                searchModel = (DefaultTableModel) searchResults.getModel();
                
                searchModel.addRow(inputData);
                               
            }
             
        }
        this.setVisible(false);
        this.setVisible(true);   
    }
    
    public void findProductsByHardwareType()
    {
        String searchParameters = searchedHardwareType.getText();
        for(int i=0; i<Database.companyDatabase.products.size();i++)
        {
            searchHardwareType = Database.companyDatabase.products.get(i).getHardwareType();
            
            if(searchHardwareType.contains(searchParameters))
            {
                searchProductID = Database.companyDatabase.products.get(i).getProductID();
                searchProductName = Database.companyDatabase.products.get(i).getProductName();
                searchPrice = Database.companyDatabase.products.get(i).getPrice();
                searchQuantity = Database.companyDatabase.products.get(i).getQuantity();
                searchSupplier = Database.companyDatabase.products.get(i).getSupplier();
                
                int totalSize = Database.companyDatabase.products.size();
                
                String[] inputData = new String[totalSize];
                inputData[0] = searchProductID;
                inputData[1] = searchHardwareType;
                inputData[2] = searchProductName;
                inputData[3] = Integer.toString(searchPrice);
                inputData[4] = Integer.toString(searchQuantity);
                inputData[5] = searchSupplier;
                
                searchModel = (DefaultTableModel) searchResults.getModel();
                
                searchModel.addRow(inputData);
                               
            }
             
        }
        this.setVisible(false);
        this.setVisible(true);   
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SeachProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SeachProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SeachProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SeachProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SeachProducts().setVisible(true);
            }
        });
    }
    DefaultTableModel searchModel;
    String searchProductID;
    String searchHardwareType;
    String searchProductName;
    String errorMessage;
    int searchPrice;
    int searchQuantity; 
    String searchSupplier; 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearSearch;
    private javax.swing.JButton btnFindProductsByName;
    private javax.swing.JButton btnPrintReport;
    private javax.swing.JButton btnSearchByHardwareType;
    private javax.swing.JButton btnSearchByProductID;
    private javax.swing.JMenuItem checkoutInterface;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu jmEdit;
    private javax.swing.JMenuItem jmnuLogOut;
    private javax.swing.JLabel lblSearchedProduct;
    private javax.swing.JLabel lblSearchedProductID;
    private javax.swing.JMenuItem menuBarAddNewCustomer;
    private javax.swing.JMenuItem menuBarAdminInterface;
    private javax.swing.JMenu menuBarFile;
    private javax.swing.JMenu menuBarView;
    private javax.swing.JTable searchResults;
    private javax.swing.JTextField searchedHardwareType;
    private javax.swing.JTextField searchedProductID;
    private javax.swing.JTextField searchedProductName;
    // End of variables declaration//GEN-END:variables
}
