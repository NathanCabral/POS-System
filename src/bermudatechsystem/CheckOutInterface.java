/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bermudatechsystem;

import javax.swing.table.*;
import javax.swing.JOptionPane;
/**
 *
 * @author Nathan Cabral
 */
public class CheckOutInterface extends javax.swing.JFrame {
    
    /**
     * Creates new form CheckOutInterface
     */
    public CheckOutInterface() {
        initComponents();
        this.setTitle("Checkout Interface");
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblCustomerName = new javax.swing.JLabel();
        customerName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        customerID = new javax.swing.JTextField();
        lblCustomerPhoneNumber = new javax.swing.JLabel();
        customerPhoneNumber = new javax.swing.JTextField();
        lblCustomerAddress = new javax.swing.JLabel();
        customerAddress = new javax.swing.JTextField();
        lblCustomerEmail = new javax.swing.JLabel();
        customerEmail = new javax.swing.JTextField();
        lblCustomerPostalCode = new javax.swing.JLabel();
        customerPostalCode = new javax.swing.JTextField();
        btnReciept = new javax.swing.JButton();
        btnCompletePurchase = new javax.swing.JButton();
        lblTotalAmountDue = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        totalAmountDue = new javax.swing.JTextField();
        totalAmountPaid = new javax.swing.JTextField();
        changeDue = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        checkoutTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnDeleteSelectedRow = new javax.swing.JButton();
        btnTotalAmountDue = new javax.swing.JButton();
        btnCash = new javax.swing.JButton();
        btnCreditDebit = new javax.swing.JButton();
        lblProductID = new javax.swing.JLabel();
        lblProductPrice = new javax.swing.JLabel();
        lblQuantityInStock = new javax.swing.JLabel();
        productID = new javax.swing.JTextField();
        productPrice = new javax.swing.JTextField();
        quantityInStock = new javax.swing.JTextField();
        lblQuantityRequested = new javax.swing.JLabel();
        customerQuantity = new javax.swing.JTextField();
        lblTotalPrice = new javax.swing.JLabel();
        totalPrice = new javax.swing.JTextField();
        lblNameOfProduct = new javax.swing.JLabel();
        productName = new javax.swing.JTextField();
        lblProductInformation = new javax.swing.JLabel();
        lblCustomerCheckoutRequest = new javax.swing.JLabel();
        btnFindProductByName = new javax.swing.JButton();
        btnCheckQuantity = new javax.swing.JButton();
        btnFindProductByProductID = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmnuLogOut = new javax.swing.JMenuItem();
        menuBarExitSystem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuBarSearchProducts = new javax.swing.JMenuItem();
        menuBarAdminInterface = new javax.swing.JMenuItem();
        menuBarEdit = new javax.swing.JMenu();
        menuBarAddCustomer = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblCustomerName.setText("Customer Name");

        customerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNameActionPerformed(evt);
            }
        });

        jLabel1.setText("Customer ID");

        customerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerIDActionPerformed(evt);
            }
        });

        lblCustomerPhoneNumber.setText("Customer Phone Number");

        lblCustomerAddress.setText("Customer Address");

        lblCustomerEmail.setText("Customer Email");

        lblCustomerPostalCode.setText("Customer Postal Code");

        customerPostalCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerPostalCodeActionPerformed(evt);
            }
        });

        btnReciept.setText("Reciept");
        btnReciept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecieptActionPerformed(evt);
            }
        });

        btnCompletePurchase.setText("Complete Purchase");
        btnCompletePurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompletePurchaseActionPerformed(evt);
            }
        });

        lblTotalAmountDue.setText("Total Amount Due");

        jLabel3.setText("Total Amount Paid ");

        jLabel2.setText("Change Due");

        totalAmountPaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalAmountPaidActionPerformed(evt);
            }
        });

        changeDue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeDueActionPerformed(evt);
            }
        });

        checkoutTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Item Number", "Item Price", "Quantity", "Total"
            }
        ));
        jScrollPane1.setViewportView(checkoutTable);

        jButton1.setText("Checkout Product");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnDeleteSelectedRow.setText("Delete Selected Row");
        btnDeleteSelectedRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelectedRowActionPerformed(evt);
            }
        });

        btnTotalAmountDue.setText("Calculate Total Amount Due");
        btnTotalAmountDue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalAmountDueActionPerformed(evt);
            }
        });

        btnCash.setText("Cash");
        btnCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCashActionPerformed(evt);
            }
        });

        btnCreditDebit.setText("Credit / Debit");
        btnCreditDebit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreditDebitActionPerformed(evt);
            }
        });

        lblProductID.setText("Product ID");

        lblProductPrice.setText("Product Price");

        lblQuantityInStock.setText("Quantity in Stock");

        productID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productIDActionPerformed(evt);
            }
        });

        productPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productPriceActionPerformed(evt);
            }
        });

        lblQuantityRequested.setText("Quantity Requested");

        customerQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerQuantityActionPerformed(evt);
            }
        });

        lblTotalPrice.setText("Total Price");

        totalPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalPriceActionPerformed(evt);
            }
        });

        lblNameOfProduct.setText("Product Name");

        productName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productNameActionPerformed(evt);
            }
        });

        lblProductInformation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblProductInformation.setText("Product Information");

        lblCustomerCheckoutRequest.setText("Customer Checkout Request");

        btnFindProductByName.setText("Find Product By Name");
        btnFindProductByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindProductByNameActionPerformed(evt);
            }
        });

        btnCheckQuantity.setText("Check Quantity");
        btnCheckQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckQuantityActionPerformed(evt);
            }
        });

        btnFindProductByProductID.setText("Find Product By ID");
        btnFindProductByProductID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindProductByProductIDActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jmnuLogOut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmnuLogOut.setText("Log Out ");
        jmnuLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuLogOutActionPerformed(evt);
            }
        });
        jMenu1.add(jmnuLogOut);

        menuBarExitSystem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuBarExitSystem.setText("Exit System");
        menuBarExitSystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarExitSystemActionPerformed(evt);
            }
        });
        jMenu1.add(menuBarExitSystem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("View");

        menuBarSearchProducts.setText("Search Products");
        menuBarSearchProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarSearchProductsActionPerformed(evt);
            }
        });
        jMenu2.add(menuBarSearchProducts);

        menuBarAdminInterface.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        menuBarAdminInterface.setText("Admin Interface");
        menuBarAdminInterface.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarAdminInterfaceActionPerformed(evt);
            }
        });
        jMenu2.add(menuBarAdminInterface);

        jMenuBar1.add(jMenu2);

        menuBarEdit.setText("Edit");

        menuBarAddCustomer.setText("Add New Customer");
        menuBarAddCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarAddCustomerActionPerformed(evt);
            }
        });
        menuBarEdit.add(menuBarAddCustomer);

        jMenuBar1.add(menuBarEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(lblProductPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblProductID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblQuantityInStock)
                                    .addComponent(lblNameOfProduct))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(productID, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(productPrice)
                                        .addComponent(quantityInStock)
                                        .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(lblProductInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnFindProductByName, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFindProductByProductID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(68, 68, 68)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(lblQuantityRequested, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(customerQuantity)
                                                .addComponent(totalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(54, 54, 54)
                                            .addComponent(lblCustomerCheckoutRequest))))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(btnCheckQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteSelectedRow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(changeDue)
                                    .addComponent(totalAmountPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnReciept, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCompletePurchase)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblCustomerPostalCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblCustomerEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblCustomerPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblCustomerAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblCustomerName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(26, 26, 26)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(customerPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(customerAddress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(customerPhoneNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(customerEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(customerID, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCash, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnCreditDebit))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(totalAmountDue, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblTotalAmountDue, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnTotalAmountDue, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(customerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerEmail)
                    .addComponent(customerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerPostalCode)
                    .addComponent(customerPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(236, 236, 236)
                .addComponent(btnTotalAmountDue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCreditDebit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCash, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotalAmountDue, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalAmountDue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalAmountPaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(changeDue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCompletePurchase, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReciept, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDeleteSelectedRow)
                        .addGap(26, 26, 26)
                        .addComponent(lblCustomerCheckoutRequest)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblQuantityRequested, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(customerQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotalPrice)
                            .addComponent(totalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCheckQuantity)
                        .addGap(14, 14, 14)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblProductInformation)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNameOfProduct)
                            .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(productID, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblProductID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProductPrice)
                            .addComponent(productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblQuantityInStock)
                            .addComponent(quantityInStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFindProductByName)
                    .addComponent(btnFindProductByProductID))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNameActionPerformed
      custName = customerName.getText();
      
      customerName.setText(custName);
      for(Customer c: Database.companyDatabase.customers)
      {
          if(custName.equals(c.getCustomerName()))
          {
              custNumber = c.getPhoneNumber();
              customerPhoneNumber.setText(custNumber);
              custEmail = c.getCustomerEmail();
              customerEmail.setText(custEmail);
              custPostalCode = c.getPostalCode();
              customerPostalCode.setText(custPostalCode);
              custID = c.getCustomerID();
              customerID.setText(custID);
              custAddress = c.getCustomerAddress();
              customerAddress.setText(custAddress);
              
              
              
          }
          else
              
          {
              System.out.println("No Customer Found");
          }
      }
                   
    }//GEN-LAST:event_customerNameActionPerformed

    
    private void customerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerIDActionPerformed

    private void customerPostalCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerPostalCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerPostalCodeActionPerformed

    private void totalAmountPaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalAmountPaidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalAmountPaidActionPerformed

    private void changeDueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeDueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_changeDueActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(status == true)
        {
            String[] row = new String[5];
        row[0] = nameOfProduct;
        row[1] = listedProductID;
        row[2] = listedProductPrice;
        row[3] = Integer.toString(inputedCustomerQuantity);
        row[4] = calculatedTotalPrice;
        
                
        modelCheckout = (DefaultTableModel)checkoutTable.getModel();
        
        modelCheckout.addRow(row);     

        productName.setText("");
        productID.setText("");
        quantityInStock.setText("");
        productPrice.setText("");
        customerQuantity.setText("");
        totalPrice.setText("");
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Not Enough Quantity In Stock", "Insufficent Stock",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnDeleteSelectedRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelectedRowActionPerformed
        modelCheckout = (DefaultTableModel)checkoutTable.getModel();
        try{
            int selectedRow = checkoutTable.getSelectedRow();
            modelCheckout.removeRow(selectedRow);
        }
        catch(Exception ex){
            errorMessage = "Model Not Found";
            new ErrorMessage(errorMessage).setVisible(true);
        }
    }//GEN-LAST:event_btnDeleteSelectedRowActionPerformed

    private void btnTotalAmountDueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalAmountDueActionPerformed
        String grabCurrentTotal = getCheckoutTotal();
        currentTotal = Double.parseDouble(grabCurrentTotal);
        totalAmountDue.setText("$"+currentTotal);
        Database.companyDatabase.totalAmountDue(currentTotal);
    }//GEN-LAST:event_btnTotalAmountDueActionPerformed

    private void btnCreditDebitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreditDebitActionPerformed
        String getTotal = getCheckoutTotal();
        double currentAmountPaid = Double.parseDouble(getTotal);
        totalAmountPaid.setText("$"+currentAmountPaid);
        Database.companyDatabase.totalAmountPaid(currentAmountPaid);
        
        currentChangeDue = 0.00;
        changeDue.setText("$"+Double.toString(currentChangeDue));
        Database.companyDatabase.changeDue(currentChangeDue);
        
        paymentMethod = "Credit/Debit";
               
    }//GEN-LAST:event_btnCreditDebitActionPerformed

    private void btnCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCashActionPerformed
        String customerInput = JOptionPane.showInputDialog("Amount of Money Paid: ");       
        totalAmountPaid.setText("$"+customerInput);
        double inputedAmount =  Double.parseDouble(customerInput);
        Database.companyDatabase.totalAmountPaid(inputedAmount);
        
        Double currentAmountPaid = Double.parseDouble(customerInput);
        String amountToBePaid = getCheckoutTotal();
        Double paidAmount = Double.parseDouble(amountToBePaid);
        currentChangeDue = currentAmountPaid - paidAmount;
        Database.companyDatabase.changeDue(currentChangeDue);
        changeDue.setText("$"+Double.toString(currentChangeDue));
        
        paymentMethod = "Cash";
    }//GEN-LAST:event_btnCashActionPerformed

    private void customerQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerQuantityActionPerformed
           checkQuantity();
    }//GEN-LAST:event_customerQuantityActionPerformed

    private void btnFindProductByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindProductByNameActionPerformed
           displayItemInformationUsingName();
    }//GEN-LAST:event_btnFindProductByNameActionPerformed

    private void productNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productNameActionPerformed
           displayItemInformationUsingName();
    }//GEN-LAST:event_productNameActionPerformed

    private void btnCheckQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckQuantityActionPerformed
           checkQuantity();
    }//GEN-LAST:event_btnCheckQuantityActionPerformed

    private void btnCompletePurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompletePurchaseActionPerformed
        String[] tempArray = new String[checkoutTable.getRowCount()];      
        for(int i = 0; i < checkoutTable.getRowCount();i++)
        {
            String itemNumber = checkoutTable.getValueAt(i,1).toString();
            String requestedQuantity = checkoutTable.getValueAt(i,3).toString();
            int quantityToBeSubtracted = Integer.parseInt(requestedQuantity);
            
            for (Product c: Database.companyDatabase.products)
            {
                if(c.getProductID().equals(itemNumber))
                {
                    c.minusQuantity(quantityToBeSubtracted);
                }
            }
           
        }
        custName = customerName.getText();
        currentEmployee = Database.companyDatabase.getCurrentUser();
        Database.companyDatabase.date();
        Database.companyDatabase.time();
        salesDate = Database.companyDatabase.getDate();
        salesTime = Database.companyDatabase.getTme();
        String itemOutput = "";
        String outputMessage = "";
        
        
        for(int i = 0; i < checkoutTable.getRowCount();i++)
        {
            itemOutput = itemOutput + "|" + (checkoutTable.getValueAt(i,1).toString()+"-" + checkoutTable.getValueAt(i, 3).toString());
        }
      
        outputMessage = (custName + "|" + paymentMethod + "|" + currentEmployee + "|" + salesDate + "|" + salesTime + "|" + itemOutput+ "|" + currentTotal);
        Database.companyDatabase.salesLog.add(outputMessage);
        
        customerName.setText("");
        customerEmail.setText("");
        customerAddress.setText("");
        customerID.setText("");
        customerAddress.setText("");
        customerPhoneNumber.setText("");
        customerPostalCode.setText("");
        totalAmountDue.setText("");
        changeDue.setText("");
        totalAmountPaid.setText("");
        
        modelCheckout.setRowCount(0);
  
    }//GEN-LAST:event_btnCompletePurchaseActionPerformed

    private void productPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productPriceActionPerformed

    private void totalPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalPriceActionPerformed

    private void btnRecieptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecieptActionPerformed
        
        Database.companyDatabase.invoiceNumber();
        for(int i = 0; i< checkoutTable.getRowCount(); i++)
        {
            String pName = checkoutTable.getValueAt(i, 0).toString();
            String pNumber = checkoutTable.getValueAt(i, 1).toString();
            String pPrice = checkoutTable.getValueAt(i, 2).toString();
            int price = Integer.parseInt(pPrice);
            String pQuantity = checkoutTable.getValueAt(i, 3).toString();
            int quantity = Integer.parseInt(pQuantity);
            String pTotal = checkoutTable.getValueAt(i, 4).toString();
                        
            Database.companyDatabase.currentItems.add(new Product(pName, pNumber, price, quantity, pTotal));
            
        }
        new  Reciept().setVisible(true);
    }//GEN-LAST:event_btnRecieptActionPerformed

    private void menuBarAddCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarAddCustomerActionPerformed
        this.setVisible(false);
        new AddCustomer().setVisible(true);
    }//GEN-LAST:event_menuBarAddCustomerActionPerformed

    private void menuBarSearchProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarSearchProductsActionPerformed

        new SeachProducts().setVisible(true);
    }//GEN-LAST:event_menuBarSearchProductsActionPerformed

    private void menuBarAdminInterfaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarAdminInterfaceActionPerformed
        int userRights = Database.companyDatabase.getCurrentUserRights();
       if(userRights == 2)
       {
           this.setVisible(false);
           new AdminInterface().setVisible(true);
       }
       else
       {
           errorMessage = "You do not have access to this interface.";
           new ErrorMessage(errorMessage).setVisible(true);
       }
    }//GEN-LAST:event_menuBarAdminInterfaceActionPerformed

    private void menuBarExitSystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarExitSystemActionPerformed
        Database.companyDatabase.saveSystem();
    }//GEN-LAST:event_menuBarExitSystemActionPerformed

    private void jmnuLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuLogOutActionPerformed
        this.setVisible(false);
        new LoginInterface().setVisible(true);
    }//GEN-LAST:event_jmnuLogOutActionPerformed

    private void btnFindProductByProductIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindProductByProductIDActionPerformed
        displayItemInformationUsingID();
        
    }//GEN-LAST:event_btnFindProductByProductIDActionPerformed

    private void productIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productIDActionPerformed
        displayItemInformationUsingID();
    }//GEN-LAST:event_productIDActionPerformed
    
    public String getCheckoutTotal()
    {
        checkoutTotal = 0.00;
        for(int i = 0; i < checkoutTable.getRowCount(); i++)
        {
            checkoutTotal = checkoutTotal + Integer.parseInt(checkoutTable.getValueAt(i,4).toString());
        }
        
        return Double.toString(checkoutTotal);
    }
    public void displayItemInformationUsingName()
    {
        
        nameOfProduct = productName.getText();
        
        if(nameOfProduct.equalsIgnoreCase(""))
        {
            this.setVisible(false);
            new SeachProducts().setVisible(true);
            errorMessage = "No Information Inputted";
            new ErrorMessage(errorMessage).setVisible(true);
        }
        
        for (Product c: Database.companyDatabase.products)
       {
          String pName = c.getProductName();
                   
          if(nameOfProduct.equals(pName))
          {
              listedProductID = c.getProductID();
              listedProductPrice = Integer.toString(c.getPrice());
              listedProductQuantity = Integer.toString(c.getQuantity());
              
              productID.setText(listedProductID);
              quantityInStock.setText(listedProductQuantity);
              productPrice.setText("$"+listedProductPrice +".00");
          } 
          
          
       }
    }
    public void displayItemInformationUsingID()
    {
        listedProductID = productID.getText();
        
        if(listedProductID.equalsIgnoreCase(""))
        {
            this.setVisible(false);
            new SeachProducts().setVisible(true);
            errorMessage = "No Information Inputted";
            new ErrorMessage(errorMessage).setVisible(true);
        }
        
        for (Product c: Database.companyDatabase.products)
       {
          String pID = c.getProductID();
                   
          if(listedProductID.equals(pID))
          {
              
              nameOfProduct = c.getProductName();
              listedProductPrice = Integer.toString(c.getPrice());
              listedProductQuantity = Integer.toString(c.getQuantity());
              
              productName.setText(nameOfProduct);
              quantityInStock.setText(listedProductQuantity);
              productPrice.setText("$"+listedProductPrice +".00");
          } 
          
          
       }
             
               
    }
    public void checkQuantity()
    {
        String cusQuantity = customerQuantity.getText();
        inputedCustomerQuantity = Integer.parseInt(cusQuantity);
        int currentStock = Integer.parseInt(quantityInStock.getText());
        int price = Integer.parseInt(listedProductPrice);
        if(currentStock >= inputedCustomerQuantity)
        {
            int total = inputedCustomerQuantity * price;
            calculatedTotalPrice = Integer.toString(total);
            totalPrice.setText("$"+calculatedTotalPrice+".00");
            status = true;
            
        }
        else
        {
            errorMessage = "Not Enough Of This Item In Stock";
            new ErrorMessage(errorMessage).setVisible(true);
            status = false;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckOutInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckOutInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckOutInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckOutInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckOutInterface().setVisible(true);
            }
        });
    }
    String custNumber;
    String custEmail;
    String custPostalCode;
    String custID;
    String custAddress;
    String custName;
    String tName;
    double checkoutTotal;
    double currentChangeDue;
    DefaultTableModel modelCheckout;
    private String nameOfProduct;
    private String listedProductID;
    private String listedProductQuantity;
    private String listedProductPrice;
    private int inputedCustomerQuantity;
    private String calculatedTotalPrice;
    private String errorMessage;
    String currentEmployee;
    String salesDate;
    String salesTime;
    String paymentMethod;
    double currentTotal;
    boolean status;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCash;
    private javax.swing.JButton btnCheckQuantity;
    private javax.swing.JButton btnCompletePurchase;
    private javax.swing.JButton btnCreditDebit;
    private javax.swing.JButton btnDeleteSelectedRow;
    private javax.swing.JButton btnFindProductByName;
    private javax.swing.JButton btnFindProductByProductID;
    private javax.swing.JButton btnReciept;
    private javax.swing.JButton btnTotalAmountDue;
    private javax.swing.JTextField changeDue;
    public javax.swing.JTable checkoutTable;
    private javax.swing.JTextField customerAddress;
    private javax.swing.JTextField customerEmail;
    private javax.swing.JTextField customerID;
    private javax.swing.JTextField customerName;
    private javax.swing.JTextField customerPhoneNumber;
    private javax.swing.JTextField customerPostalCode;
    private javax.swing.JTextField customerQuantity;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private static javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem jmnuLogOut;
    private javax.swing.JLabel lblCustomerAddress;
    private javax.swing.JLabel lblCustomerCheckoutRequest;
    private javax.swing.JLabel lblCustomerEmail;
    private javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblCustomerPhoneNumber;
    private javax.swing.JLabel lblCustomerPostalCode;
    private javax.swing.JLabel lblNameOfProduct;
    private javax.swing.JLabel lblProductID;
    private javax.swing.JLabel lblProductInformation;
    private javax.swing.JLabel lblProductPrice;
    private javax.swing.JLabel lblQuantityInStock;
    private javax.swing.JLabel lblQuantityRequested;
    private javax.swing.JLabel lblTotalAmountDue;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JMenuItem menuBarAddCustomer;
    private javax.swing.JMenuItem menuBarAdminInterface;
    private javax.swing.JMenu menuBarEdit;
    private javax.swing.JMenuItem menuBarExitSystem;
    private javax.swing.JMenuItem menuBarSearchProducts;
    private javax.swing.JTextField productID;
    private javax.swing.JTextField productName;
    private javax.swing.JTextField productPrice;
    private javax.swing.JTextField quantityInStock;
    private javax.swing.JTextField totalAmountDue;
    private javax.swing.JTextField totalAmountPaid;
    private javax.swing.JTextField totalPrice;
    // End of variables declaration//GEN-END:variables
}
